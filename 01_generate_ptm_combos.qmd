---
title: "Generate PTM Combinations"
date: 02/13/2024
date-format: YYYY-MM-DD
author: Karl F Poncha
output: html
---


```{python generate all possible combinations of PTMs up to the proteoform level}
import os
import pandas as pd
import re
from itertools import combinations
from os.path import basename, splitext
import glob

def parse_ptms(proteoform):
    # Find all post-translational modifications (PTMs) in the proteoform string
    ptms = re.findall(r'([A-Z]\d*[^A-Z]*)', proteoform)
    return ptms

def sort_ptms_by_position(ptms):
    # Sort PTMs based on their position in the protein sequence
    ptms.sort(key=lambda x: int(re.search(r'\d+', x).group()))
    return ''.join(ptms)

def is_valid_combination(combination):
    # Placeholder for any validation logic for PTM combinations
    return True

def compute_ptm_combinations(df):
    # Compute the combinations of PTMs for each proteoform in the dataframe
    ptm_combinations = {}
    invalid_combos = []

    for index, row in df.iterrows():
        proteoform = row['Sorted Proteoform']
        percentage = row['percentage']
        ptms = parse_ptms(proteoform)

        for r in range(1, len(ptms) + 1):
            for combination in combinations(ptms, r):
                sorted_combination = sort_ptms_by_position(list(combination))
                if not is_valid_combination(combination):
                    invalid_combos.append(sorted_combination)
                    continue

                combination_key = f"{len(combination)}_{sorted_combination}"
                ptm_combinations[combination_key] = ptm_combinations.get(combination_key, 0) + percentage

    ptm_combinations = {k: v for k, v in ptm_combinations.items()}
    return ptm_combinations, list(set(invalid_combos))

def write_combinations_to_files(ptm_combinations, base_file_name, combos_root_directory):
    # Create subdirectories based on the combination level and write output files accordingly
    combinations_by_level = {}

    for combination, percentage in ptm_combinations.items():
        level, ptm_combination = combination.split('_', 1)
        if level not in combinations_by_level:
            combinations_by_level[level] = []
        combinations_by_level[level].append((ptm_combination, percentage))

    for level, combos in combinations_by_level.items():
        # Determine the directory for the current level within combos_root_directory
        level_directory = os.path.join(combos_root_directory, f'combos_{level}')
        if not os.path.exists(level_directory):
            os.makedirs(level_directory)  # Create the directory if it does not exist
        
        # Define the output file path within the level directory
        output_file_path = os.path.join(level_directory, f'{base_file_name}_combos_{level}.csv')
        
        # Write the data to a CSV file
        df = pd.DataFrame(combos, columns=['PTM Combination', 'Percentage Abundance']).drop_duplicates()
        df.to_csv(output_file_path, index=False)

def main():
    # Path setup for the source data and the output within the same 'output' folder
    base_directory = os.getcwd()
    output_directory = os.path.join(base_directory, "output")
    combos_root_directory = os.path.join(output_directory, "combos")

    # Pattern to match the source CSV files within the output directory
    pattern = os.path.join(output_directory, "*_H3.[23]_sorted_proteoform.csv")

    for file_path in glob.glob(pattern):
        base_file_name = splitext(basename(file_path))[0]
        
        df = pd.read_csv(file_path)
        ptm_combinations, invalid_combos = compute_ptm_combinations(df)
        
        write_combinations_to_files(ptm_combinations, base_file_name, combos_root_directory)

        if invalid_combos:
            # Handle invalid combos file within the combos_root_directory
            invalid_combos_path = os.path.join(combos_root_directory, f'{base_file_name}_invalid_combos.log')
            with open(invalid_combos_path, 'w') as f:
                for combo in invalid_combos:
                    f.write(f"{combo}\n")

if __name__ == "__main__":
    main()
    
```

```{python process up discrete PTMs}
import os
import pandas as pd
import re

def add_missing_ptms(file_path, ptms, output_dir):
    """ Add missing PTMs to the dataset with zero abundance and save to new file. """
    # Read existing data
    data = pd.read_csv(file_path)
    existing_ptms = set(data['PTM Combination'])
    
    # Determine missing PTMs and prepare new rows
    missing_ptms = [ptm for ptm in ptms if ptm not in existing_ptms]
    missing_data = pd.DataFrame({
        "PTM Combination": missing_ptms,
        "Percentage Abundance": [0]*len(missing_ptms)
    })
    
    # Combine old and new data, then save
    updated_data = pd.concat([data, missing_data], ignore_index=True)
    new_file_path = os.path.join(output_dir, os.path.basename(file_path))
    updated_data.to_csv(new_file_path, index=False)
    print(f"Updated file saved to {new_file_path}")

# Set up directory paths
base_dir = os.path.join(os.getcwd())
input_dir = os.path.join(base_dir, "output", "combos", "combos_1")
output_dir = os.path.join(base_dir, "output", "combos", "combos_1_interplay")
os.makedirs(output_dir, exist_ok=True)

# Define all PTMs
specified_ptms = [
    "K4me1", "K4un", "R8me1", "R8un", "K9me1", "K9me2", "K9me3", "K9ac", "K9un", 
    "K14me1", "K14me2", "K14me3", "K14ac", "K14un", "R17me1", "R17me2", "R17un", 
    "K18me1", "K18me2", "K18ac", "K18un", "K23me1", "K23me2", "K23me3", "K23ac", 
    "K23un", "R26me1", "R26me2", "R26un", "K27me1", "K27me2", "K27me3", "K27ac", 
    "K27un", "K36me1", "K36me2", "K36me3", "K36un"
]

# Process each file in the input directory
for file_name in os.listdir(input_dir):
    if file_name.endswith('.csv'):
        file_path = os.path.join(input_dir, file_name)
        add_missing_ptms(file_path, specified_ptms, output_dir)

```

```{python process up binary combinations to represent mutual exclusion}
import os
import pandas as pd
import re

def extract_position(ptm):
    """ Extract numerical position from a PTM string using regex. """
    match = re.search(r"\d+", ptm)
    return int(match.group()) if match else None

def generate_valid_combinations(ptms):
    """ Generate all valid PTM combinations based on the position and residue rules. """
    valid_combinations = []
    for i, ptm1 in enumerate(ptms):
        pos1 = extract_position(ptm1)
        for ptm2 in ptms[i+1:]:
            pos2 = extract_position(ptm2)
            if pos1 < pos2:  # Ensure the position of the first is less than the second
                valid_combinations.append(ptm1 + ptm2)
    return valid_combinations

def add_missing_combinations(file_path, valid_combinations, output_dir):
    """ Add missing PTM combinations to the dataset with zero abundance and save to new file. """
    # Read existing data
    data = pd.read_csv(file_path)
    existing_combinations = set(data['PTM Combination'])
    
    # Determine missing combinations and prepare new rows
    missing_combinations = [combo for combo in valid_combinations if combo not in existing_combinations]
    missing_data = pd.DataFrame({
        "PTM Combination": missing_combinations,
        "Percentage Abundance": [0]*len(missing_combinations)
    })
    
    # Combine old and new data, then save
    updated_data = pd.concat([data, missing_data], ignore_index=True)
    new_file_path = os.path.join(output_dir, os.path.basename(file_path))
    updated_data.to_csv(new_file_path, index=False)
    print(f"Updated file saved to {new_file_path}")

# Set up directory paths
base_dir = os.path.join(os.getcwd())
input_dir = os.path.join(base_dir, "output", "combos", "combos_2")
output_dir = os.path.join(base_dir, "output", "combos", "combos_2_interplay")
os.makedirs(output_dir, exist_ok=True)

# Define all PTMs and generate valid combinations
specified_ptms = [
    "K4me1", "K4un", "R8me1", "R8un", "K9me1", "K9me2", "K9me3", "K9ac", "K9un", 
    "K14me1", "K14me2", "K14me3", "K14ac", "K14un", "R17me1", "R17me2", "R17un", 
    "K18me1", "K18me2", "K18ac", "K18un", "K23me1", "K23me2", "K23me3", "K23ac", 
    "K23un", "R26me1", "R26me2", "R26un", "K27me1", "K27me2", "K27me3", "K27ac", 
    "K27un", "K36me1", "K36me2", "K36me3", "K36un"
]
valid_combinations = generate_valid_combinations(specified_ptms)

# Process each file in the input directory
for file_name in os.listdir(input_dir):
    if file_name.endswith('.csv'):
        file_path = os.path.join(input_dir, file_name)
        add_missing_combinations(file_path, valid_combinations, output_dir)


```